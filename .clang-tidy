---
Checks: "-*,
  cppcoreguidelines-avoid-goto,\
  cppcoreguidelines-init-variables,\
  cppcoreguidelines-macro-usage,\
  cppcoreguidelines-misleading-capture-default-by-value,\
  cppcoreguidelines-narrowing-conversions,\
  cppcoreguidelines-no-malloc,\
  cppcoreguidelines-no-suspend-with-lock,\
  cppcoreguidelines-pro-type-const-cast,\
  cppcoreguidelines-pro-type-cstyle-cast,\
  cppcoreguidelines-pro-type-member-init,\
  cppcoreguidelines-slicing,\
  cppcoreguidelines-virtual-class-destructor,\
  bugprone-assert-side-effect,\
  bugprone-assignment-in-if-condition,\
  bugprone-chained-comparison,\
  bugprone-copy-constructor-init,\
  bugprone-compare-pointer-to-member-virtual-function,\
  bugprone-dynamic-static-initializers,\
  bugprone-empty-catch,\
  bugprone-exception-escape,\
  bugprone-fold-init-type,\
  bugprone-forwarding-reference-overload,\
  bugprone-implicit-widening-of-multiplication-result,\
  bugprone-inaccurate-erase,\
  bugprone-inc-dec-in-conditions,\
  bugprone-incorrect-roundings,\
  bugprone-infinite-loop,\
  bugprone-integer-division,\
  bugprone-macro-parentheses,\
  bugprone-macro-repeated-side-effects,\
  bugprone-misplaced-operator-in-strlen-in-alloc,\
  bugprone-misplaced-pointer-arithmetic-in-alloc,\
  bugprone-misplaced-widening-cast,\
  bugprone-move-forwarding-reference,\
  bugprone-multi-level-implicit-pointer-conversion,\
  bugprone-multiple-new-in-one-expression,\
  bugprone-multiple-statement-macro,\
  bugprone-non-zero-enum-to-bool-conversion,\
  bugprone-optional-value-conversion,\
  bugprone-parent-virtual-call,\
  bugprone-pointer-arithmetic-on-polymorphic-object,\
  bugprone-redundant-branch-condition,\
  bugprone-reserved-identifier,\
  bugprone-return-const-ref-from-parameter,\
  bugprone-shared-ptr-array-mismatch,\
  bugprone-signed-char-misuse,\
  bugprone-sizeof-container,\
  bugprone-sizeof-expression,\
  bugprone-standalone-empty,\
  bugprone-string-constructor,\
  bugprone-string-integer-assignment,\
  bugprone-string-literal-with-embedded-nul,\
  bugprone-stringview-nullptr,\
  bugprone-suspicious-enum-usage,\
  bugprone-suspicious-include,\
  bugprone-suspicious-memory-comparison,\
  bugprone-suspicious-missing-comma,\
  bugprone-suspicious-semicolon,\
  bugprone-suspicious-string-compare,\
  bugprone-suspicious-stringview-data-usage,\
  bugprone-swapped-arguments,\
  bugprone-terminating-continue,\
  bugprone-throw-keyword-missing,\
  bugprone-too-small-loop-variable,\
  bugprone-undefined-memory-manipulation,\
  bugprone-unhandled-exceptions-at-new,\
  bugprone-unique-ptr-array-mismatch,\
  bugprone-unsafe-functions,\
  bugprone-unused-return-value,\
  bugprone-use-after-move,\
  google-build-using-namespace,\
  misc-confusable-identifiers,\
  misc-coroutine-hostile-raii,\
  misc-definitions-in-headers,\
  misc-header-include-cycle,\
  misc-misplaced-const,\
  misc-new-delete-overloads,\
  misc-non-copyable-objects,\
  misc-redundant-expression,\
  misc-static-assert,\
  misc-throw-by-value-catch-by-reference,\
  misc-unconventional-assign-operator,\
  misc-uniqueptr-reset-release,\
  misc-unused-parameters,\
  modernize-avoid-bind,\
  modernize-concat-nested-namespaces,\
  modernize-deprecated-headers,\
  modernize-loop-convert,\
  modernize-min-max-use-initializer-list,\
  modernize-pass-by-value,\
  modernize-raw-string-literal,\
  modernize-redundant-void-arg,\
  modernize-type-traits,\
  modernize-unary-static-assert,\
  modernize-use-bool-literals,\
  modernize-use-default-member-init,\
  modernize-use-designated-initializers,\
  modernize-use-equals-default,\
  modernize-use-equals-delete,\
  fuchsia-trailing-return,\
  modernize-use-nullptr,\
  modernize-use-override,\
  modernize-use-ranges,\
  modernize-use-starts-ends-with,\
  modernize-use-using,\
  performance-avoid-endl,\
  performance-faster-string-find,\
  performance-for-range-copy,\
  performance-implicit-conversion-in-loop,\
  performance-inefficient-algorithm,\
  performance-move-const-arg,\
  performance-move-constructor-init,\
  performance-no-automatic-move,\
  performance-trivially-destructible,\
  performance-unnecessary-copy-initialization,\
  readability-avoid-const-params-in-decls,\
  readability-avoid-return-with-void-value,\
  readability-const-return-type,\
  readability-container-contains,\
  readability-container-data-pointer,\
  readability-container-size-empty,\
  readability-delete-null-pointer,\
  readability-duplicate-include,\
  readability-enum-initial-value,\
  readability-inconsistent-declaration-parameter-name,\
  readability-isolate-declaration,\
  readability-math-missing-parentheses,\
  readability-misplaced-array-index,\
  readability-redundant-control-flow,\
  readability-redundant-declaration,\
  readability-redundant-function-ptr-dereference,\
  readability-redundant-inline-specifier,\
  readability-redundant-member-init,\
  readability-redundant-smartptr-get,\
  readability-redundant-string-init,\
  readability-reference-to-constructed-temporary,\
  readability-simplify-boolean-expr,\
  readability-simplify-subscript-expr,\
  readability-static-accessed-through-instance,\
  readability-string-compare,\
  readability-uniqueptr-delete-release,\
  readability-use-anyofallof,\
  readability-use-std-min-max,\
  readability-identifier-naming,\
"

# https://clang.llvm.org/extra/clang-tidy/checks/readability/identifier-naming.html

CheckOptions:
  - { key: misc-unused-parameters.StrictMode,                    value: 0 }
  - { key: readability-identifier-naming.NamespaceCase,          value: CamelCase }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase }
  - { key: readability-identifier-naming.PrivateMemberPrefix,    value: _ }
  - { key: readability-identifier-naming.ProtectedMemberPrefix,    value: _ }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase }
  - { key: readability-identifier-naming.MemberCase,             value: camelBack }
  - { key: readability-identifier-naming.ClassMemberCase,        value: camelBack }
  - { key: readability-identifier-naming.FunctionCase,           value: camelBack }
  - { key: readability-identifier-naming.VariableCase,           value: camelBack }
  - { key: readability-identifier-naming.GlobalConstantCase,     value: g_camelBack }
  - { key: readability-identifier-naming.ParameterCase,          value: camelBack }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix,   value: s_ }
  - { key: readability-identifier-naming.StaticConstantConstant, value: camelBack }
  - { key: readability-identifier-naming.StaticVariablePrefix,   value: s_ }
  - { key: readability-identifier-naming.StaticVariableConstant, value: camelBack }
  - { key: readability-identifier-naming.GlobalVariableCase,     value: camelBack }

WarningsAsErrors: '*'
HeaderFilterRegex: ''
